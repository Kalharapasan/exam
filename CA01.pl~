% Genders
female(mona).
female(monisa).
female(elizabeth).
female(margaret).
female(diana).
female(anne).
female(sarah).
female(zara).
female(johana).
female(monalisa).

male(george).
male(samith).
male(philip).
male(charles).
male(mark).
male(andrew).
male(edward).
male(william).
male(harry).
male(peter).

% Spouses
spouse(george, mona).
spouse(mona, george).

spouse(samith, monisa).
spouse(monisa, samith).

spouse(elizabeth, philip).
spouse(philip, elizabeth).

spouse(charles, diana).
spouse(diana, charles).

spouse(anne, mark).
spouse(mark, anne).

spouse(andrew, sarah).
spouse(sarah, andrew).

spouse(edward, monalisa).
spouse(monalisa, edward).

% Parent-child relationships
parent(george, elizabeth).
parent(george, samith).
parent(george, margaret).
parent(mona, elizabeth).
parent(mona, samith).
parent(mona, margaret).

parent(samith, diana).
parent(monisa, diana).

parent(elizabeth, charles).
parent(elizabeth, anne).
parent(elizabeth, andrew).
parent(elizabeth, edward).
parent(philip, charles).
parent(philip, anne).
parent(philip, andrew).
parent(philip, edward).

parent(charles, william).
parent(charles, harry).
parent(diana, william).
parent(diana, harry).

parent(anne, peter).
parent(mark, peter).

parent(andrew, zara).
parent(sarah, zara).

parent(edward, johana).
parent(edward, monalisa).
parent(monalisa, johana).
parent(monalisa, monalisa).

% Child
child(X, Y) :- parent(Y, X).

% Grandparent
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).

% Great-grandparent
great_grandparent(X, Y) :- parent(X, Z), grandparent(Z, Y).

% Siblings
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.

brother(X, Y) :- sibling(X, Y), male(X).
sister(X, Y) :- sibling(X, Y), female(X).

% Son and Daughter
son(X, Y) :- parent(Y, X), male(X).
daughter(X, Y) :- parent(Y, X), female(X).

% Uncle and Aunt
uncle(X, Y) :- brother(X, Z), parent(Z, Y).
aunt(X, Y) :- sister(X, Z), parent(Z, Y).

% Brother-in-law and Sister-in-law
brother_in_law(X, Y) :- spouse(Y, Z), brother(X, Z).
brother_in_law(X, Y) :- spouse(X, Z), sibling(Z, Y).

sister_in_law(X, Y) :- spouse(Y, Z), sister(X, Z).
sister_in_law(X, Y) :- spouse(X, Z), sibling(Z, Y).

% First Cousins
first_cousin(X, Y) :- parent(A, X), parent(B, Y), sibling(A, B).


%==========================================
% Base Case
factorial(0, 1).

% Recursive Case
factorial(N, F) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    F is N * F1.
% Base Cases
fibonacci(0, 0).
fibonacci(1, 1).

% Recursive Case
fibonacci(N, F) :-
    N > 1,
    N1 is N - 1,
    N2 is N - 2,
    fibonacci(N1, F1),
    fibonacci(N2, F2),
    F is F1 + F2.

%=============================================================
employee(111, peter, 25, accountant, 50000, 75, 162).
employee(112, askar, 37, software_engineer, 150000, 70, 165).
employee(113, amal, 28, system_analyst, 100000, 55, 170).
employee(114, kumar, 40, network_engineer, 160000, 60, 152).
employee(115, divya, 37, hrm, 80000, 45, 148).
employee(116, selvanayagi, 35, it_technician, 75000, 40, 150).
employee(117, malar, 23, web_developer, 85000, 35, 158).
employee(118, suresh, 25, data_scientist, 95000, 78, 180).
employee(119, fathima, 23, it_director, 70000, 42, 155).
employee(120, kavya, 45, qa_tester, 85000, 50, 160).


is_employee(Name) :- employee(_, Name, _, _, _, _, _).
employee_count(Count) :-
    findall(ID, employee(ID, _, _, _, _, _, _), List),
    length(List, Count).
all_employees(List) :-
    findall(Name, employee(_, Name, _, _, _, _, _), List).
average_salary(Avg) :-
    findall(Salary, employee(_, _, _, _, Salary, _, _), Salaries),
    sumlist(Salaries, Total),
    length(Salaries, Count),
    Count > 0,
    Avg is Total // Count.
get_promotion(Name) :-
    employee(_, Name, _, _, Salary, _, _),
    Salary >= 80000.

no_promotion(Name) :-
    employee(_, Name, _, _, Salary, _, _),
    Salary < 80000.
